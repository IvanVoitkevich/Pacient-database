var http = require("http"); 
/*
  Первоым делом, для того чтобы можно было пользоваться уже написанным умными людьми кодом http сервера 
  (который ты будешь программировать так, чтобы он выполнял нужные тебе задачи),
  нужно добавить модуль библиотеки где лежит код его реализации.
  словом require мы сообщаем среде(node.js которая выполняет твой код)
  что мы будем использовать функционал из библиотеки которая в скобках в данном случае 'http'.
  Библиотеки (наборы уже готовых к использованию функций которые решают какуюто задачу) во всех наверное язаках выполняют в виде модулей.
  
  Модуль - это очень часто встречающийся в программировании (и других инженериях) подход. 
  Это такой изолированный от внешнего вмешательства в детали набор функций и прочего кода, которые решают какую-то проблему
  Модули внутри могут состоять из множества подмодулей, и использовать сторонние модули которые называются "зависимости" 
  таким же образом как тут используется "http". Тоесть в твоем случае у тебя есть зависимость от модуля  'http'. 
  Чтобы с модулем взамодействовать он предоставляет интерфейс (общедосупные функции которые можно вызывать).
  http модуль включает в себя сервер (программа которая подключается к сети и ждет когда придет запрос из браузера,
  как только приходит он запускает ту функцию которую ты ему передал в параметры) 
  и множество других функций. Изоляция здесь значит что ты не должен лезть внутрь библиотеки (хотя можешь)
  и находить те функции которые установят серверу стартовые значения, запустят его, и будут реагировать на приходящие запросы. 
  Он дает интерфейс - одну простую функцию для задания стартовых параметров - "createServer" она возвращает объект сервера (про объект ниже).
  этот объект сервера имеет в свою очередь свой интерфейс - одну простую функцию для старта работы - listen.
  
  Аналогия из физиологии (тут не силен не пинай если гдето не точно))  - орган. Это тоже набор какихто тканей и т.п. который решает некоторую задачу,
  при этом он изолирован от прямого вмешательства другими органами. 
  (например сердечно-сосудистая система имеет собственную систему генерации ритма изолированную от ЦНС ибо нехер ЦНС лезть в ответственные механизмы,
  можно напортачить ну или при временном отказе ЦНС - организму пиздец). При этом оно предоставляет интерфейс - реакция на повышение адреналина.
  
  Аналогия из инженерии автомобиль устроен бля-как сложно коленвалы, клапана, опережение зажигания - но все под капотом, а предоствляет любой блондинке
  2 педали, руль и зеркало для губ.
*/ 

var server = http.createServer(handleRequest); /* в параметрах имя функции описанной ниже (внимание!) Только имя функции без скобочек - мы ее САМУ передаем туда
(если писать со скобочками то она бы выполнилась и передался бы результат ее выполнения)
по другому можно было описать саму функцию сразу внутри: http.createServer(function(req, res){ ... но так мож чуть понятнее*/

/*
 наша функция которая обработает запрос и подготовит ответ
*/
var handleRequest = function(request, response) {
  /* 
  что конкретно мы будем отправлять в ответ зависит от того какой пришел запрос, 
  поэтому функция первым параметром пускай принимает запрос - request. чтобы удобно работать с ответом мы его передадим вторым параметром - request,
  request и response это тоже разновидности модулей, который в терминологии JS называются Объекты 
  Объекты это такие небольшие модульчики. Модуль/Объект по аналогии как Орган/клетка (оба специализируются на какойто задаче, изолированы, дают интерфейс но на разных уровнях) 
  кроме того что они решают задачу часто объекты являются моделью какого процесса или реального объекта. например объект request - моделирует свойства реального текста запроса, 
  у него есть свойства (тоже интерфейс) присущие реальному запросу:
  - url (то что вбито в адресную строку браузера)
  - метод  
  - заголовки,
  - тело (полезная нагрузка)
  мы если мы в них чтото запишем с помощью интерфесной ф-ции write - у реального запроса они изменяться на новые, ну и читать из свойст удобнее т.к. там не надо искать в 
  тексте где тут заголовок а где тело. Библиотека http и выдает нам вместо текста запроса/ответа объекты request/response которые в свою очередь дают нам нужный итерфейс
  через response.write мы можем писать в текст respons-а любую информацию, без геморроя собственноручного составления этого респонса все остальное делает библиотека.
  */
  
  fillResponse(response); //вызовем функцию заполнения респонса (описана ниже)

  response.end(); // даем серверу знать что мы закончили заполнять респонс и он может быть спокойно отправлен обратно браузеру
}

/*напишем функцию котрая будет заполнять ответ сервера какимито данными чтобы потом отправить их браузеру*/
var fillResponse = function(response){
  /*
    для того чтобы браузер мог понять что же мы ему отправили за данные и решить что с ними делать и как отображать - мы должны указать в заголовке (см. HTTP в вики) 
    какого они типа
  */ 
  response.writeHead(200, {"Content-Type": "text/plain"});
  
  /*
    просто записываем в респонс чуть-чуть текста
  */
  response.write("Hello");
}


server.listen(8888); // ну все можно стартовать сервер

console.log("in browser go to http://localhost:8888"); //чисто для красоты чтобы не было пустого мигания в консоли